// create a new project
- npx create-next-app@13.4.19

// first step
- go to page.tsx and remove main to start clean up
- go to globals.css and remove these line:
    --background-start-rgb: 0, 0, 0; 
    --background-end-rgb: 0, 0, 0;
    body -> background: linear-gradient

// icons
- npm i react-icons@4.11.0   

// current path - selected item in navbar
- npm i classnames@2.3.2

// connection to my mysql
- npm i prisma@5.3.1
- npx prisma init
    * go to prisma folder then schema and change db>provider to mysql
    * go to .env and change DATABASE_URL

// to create model - go to schema.prisma then add your model
after finish run this comand to format the model
- npx prisma format  
- npx prisma migrate dev 

// validation DATA
- npm i zod@3.22.2

// prisma client
https://www.prisma.io/docs/orm/more/help-and-troubleshooting/help-articles/nextjs-prisma-client-dev-practices

- go to prisma folder and then create client.ts


// Install Radix Themes
https://www.radix-ui.com/themes/docs/overview/getting-started
- npm install @radix-ui/themes
* import this in root layout in the top
    import '@radix-ui/themes/styles.css';
* import theme ui layout also
    import { Theme } from '@radix-ui/themes';    
* Add Theme to your application, wrapping the root component inside of body

// to customize the theme
* go to layout and then add <ThemePanel /> in theme area

// to keep FONT -  Inter working fine with Radix Themes
https://www.radix-ui.com/themes/docs/theme/typography#with-nextfont
* copy this code: variable: '--font-inter',  and put it in object Inter in layout
* change className in html tag from inter.className to inter.variable
* create theme-config.css in app folder then import the file in root layout "before any import - css"

// Adding a Markdown Editor 
https://www.npmjs.com/package/react-simplemde-editor
- npm install --save react-simplemde-editor easymde
- add import :
    import SimpleMDE from "react-simplemde-editor";
    import "easymde/dist/easymde.min.css";

// React Hook Form
https://react-hook-form.com/
- npm i react-hook-form@7.46.1


// to send data via api 
- npm i axios@1.5.0


// hook form
- npm i @hookform/resolvers@3.3.1


// spinner
https://tw-elements.com/docs/standard/components/spinners/


// slow server "Call"
- npm i delay

// loading
- npm i react-loading-skeleton@3.3.1

// Markdown preview
- npm i react-markdown@8.0.7

// @tailwindcss/typography
// A first-party plugin for providing beautiful typographic defaults.
https://v1.tailwindcss.com/docs/typography-plugin
- npm install -D @tailwindcss/typography
- add require('@tailwindcss/typography') to tailwind.config.ts

// custom component
https://nextjs.org/docs/pages/api-reference/components/link#if-the-child-is-a-custom-component-that-wraps-an-a-tag


// attribute className={here} 
https://www.radix-ui.com/themes/docs/theme/breakpoints

// icons
https://www.radix-ui.com/icons
- npm i @radix-ui/react-icons

// cash data:  dynamic - revalidate
https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config


// alert dialog
https://www.radix-ui.com/themes/docs/components/alert-dialog


// auth
https://next-auth.js.org/getting-started/example
- npm install next-auth@4.23.1
- ... to catch all -> name of parameter : next to auth - ex: localhost:3000/auth/sinup
/app/api/auth/[...nextauth]/route.ts

- add NEXTAUTH_URL & NEXTAUTH_SECRET to .env file
NEXTAUTH_SECRET to generate go to cmd run:
- openssl rand -base64 32
// create project on cloud 
https://console.cloud.google.com/
// google provider
https://next-auth.js.org/providers/google
// you have to open and select correct project 
https://console.developers.google.com/apis/credentials
- Click configure consent screen
- Select External 
- Add name and email
- Click save 
- Click on Add or remove scopes : select email & profile
- Add User you can login
- save
=====go back to credentials=======
- Click on create credentials then select oAuth client id
- Select type
- Add name 
- Authorized JavaScript origins add:  http://localhost:3000
- Authorized redirect URIs add:
For production: https://{YOUR_DOMAIN}/api/auth/callback/google
For development: http://localhost:3000/api/auth/callback/google 
- click create
- copy : GOOGLE_CLIENT_ID &GOOGLE_CLIENT_SECRET put it in .env file

// Prisma Adapter : to store information to db
https://authjs.dev/getting-started/adapters
- npm i @next-auth/prisma-adapter@1.0.7

change code in : /app/api/auth/[...nextauth]/route.ts


// Session 
- create auth folder in app folder
- create Provider.tsx in auth folder
- add AuthProvider in root layout 
* to check the Session
import { useSession } from "next-auth/react";
const { status, data: session } = useSession();
status === "authenticated" | status === "unauthenticated"



// if we need to add some modification on all project layer 
go to /next.config.js  and add
async headers() {
        return [
            {
                source: '/:path*',
                headers: [
                    { key: 'referrer-policy', value: 'no-referrer' }
                ]
            }
        ]
}


// to protect the API, a middleware must be created in the root folder.
middleware.ts
 
to get session
const session = await getServerSession(authOptions);


// insted of fetch data using status and effect
https://tanstack.com/query/latest
https://www.npmjs.com/package/@tanstack/react-query
- npm i @tanstack/react-query@4.35.3
- create a new file in app called name : QueryClientProvider.tsx

// to make relationshap
in issue model
assignedToUserId String?  @db.VarChar(255)
assignedToUser   User?    @relation(fields: [assignedToUserId], references: [id])
in user model
assignedIssues Issue[]


// toast
https://www.npmjs.com/package/react-hot-toast
- npm i react-hot-toast@2.4.1

// Generate records in database -> ChatGPT
Given the following prisma model, generate SQL statement to insert 40 records in the issue table.
 Use real-world titles and description for issues. Status can be OPEN, IN_PROGRESS or CLOSED. Descriptions should be a paragraph long.
 Provide different values for the createdAt and updatedAt columns.
 model Issue {
  id               Int      @id @default(autoincrement())
  title            String   @db.VarChar(255)
  description      String   @db.Text
  status           Status   @default(OPEN)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}  


// charts
https://recharts.org/en-US/
https://www.npmjs.com/package/recharts
- npm i recharts@2.8.0


// to log query in terminal go to client.ts
// add log: ['query'] to PrismaClient
const prismaClientSingleton = () => {
  return new PrismaClient({
    log: ['query']
  })
}




